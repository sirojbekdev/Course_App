@using Presentation.Infostructure.Services;
@inject AppData AppData
@inject UserManager<AppUser> UserManager
@inject IMessageService Message
@inject SpinnerService Spinner
@inject IUserService UserService

<Table PageSize="10" Class="text-body bg-body" TItem="AppUser" DataSource="@Collectors">

    <PropertyColumn Sortable Property="c=>c.UserName">
        <a href="Collectors/@context.Id">@context.UserName</a>
    </PropertyColumn>

    <PropertyColumn Sortable Title="Collections" Property="c=>c.Collections">
        @context.Collections.Count
    </PropertyColumn>
    <PropertyColumn Sortable Title="Total Items" Property="c=> c.Collections.Sum(x=>x.Items.Count)">
    </PropertyColumn>
    <PropertyColumn Sortable Title="Total Likes" Property="c=> c.Collections.Sum(x=>x.Items.Sum(x=>x.Likes.Count))">
    </PropertyColumn>

    @if (AppData.User != null && AppData.IsAdmin)
    {
        <ActionColumn Title="Actions">
            <Space Size=@("middle")>
                <SpaceItem>
                    <Button Class="btn btn-danger" OnClick="()=> Delete(context)">Delete</Button>
                </SpaceItem>
                @if (context.Status == Domain.Enums.UserStatus.Active)
                {
                    <SpaceItem>
                        <Button Class="btn btn-info" OnClick="()=> BlockUser(context)">Block</Button>
                    </SpaceItem>
                }
                else
                {
                    <SpaceItem>
                        <Button Class="btn btn-info" OnClick="()=> UnblockUser(context)">Unblock</Button>
                    </SpaceItem>
                }
            </Space>
        </ActionColumn>
    }

</Table>

@if (_selectedUser != null)
{
    <Modal Title="@_selectedUser.UserName"
       Visible="@_visible"
       OnOk="@HandleOk"
       OkButtonProps="new AntDesign.ButtonProps(){ Danger = true }"
       OnCancel="@HandleCancel">
        <p>Do You want to delete?</p>
        <p>Item : @_selectedUser.UserName</p>
        <p>With @_selectedUser.Collections?.Count likes</p>
    </Modal>
}
@code {
    [Parameter]
    public IEnumerable<AppUser>? Collectors { get; set; }

    protected override void OnInitialized()
    {
        _isViewOnly = AppData.User != null;
    }

    AppUser? _selectedUser;
    bool _visible = false;
    bool _isViewOnly = true;

    private async Task HandleOk(MouseEventArgs e)
    {
        Spinner.Show();
        var result = await UserService.DeleteUserAsync(_selectedUser);
        Spinner.Hide();
        if (result != null)
        {
            await Message.Success("User Deleted");
        }
        else
        {
            await Message.Error("Something went wrong");
        }
        _visible = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        _visible = false;
        _selectedUser = null;
    }

    void Delete(AppUser collector)
    {
        _visible = true;
        _selectedUser = collector;
    }

    private async Task UnblockUser(AppUser user)
    {
        Spinner.Show();
        var result = await UserService.UnblockUserAsync(user);
        Spinner.Hide();
        if (result != null)
        {
            await Message.Success("User Unblocked");
        }
        else
        {
            await Message.Error("Something went wrong");
        }
    }

    private async Task BlockUser(AppUser user)
    {
        Spinner.Show();
        var result = await UserService.BlockUserAsync(user);
        Spinner.Hide();
        if (result != null)
        {
            await Message.Success("User Unblocked");
        }
        else
        {
            await Message.Error("Something went wrong");
        }
    }
}

