@page "/MyCollections/{CollectionId:guid}/Edit"
@inject IUnitOfWork UnitOfWork
@inject AppData AppData
@inject IMessageService Message
@inject SpinnerService Spinner
@inject NavigationManager Navigation
@attribute [Authorize(Policy ="IsActive")]
<div class="h3">Edit Collection</div>
@if (_collection != null)
{
    <EditForm Model="@_collection" OnValidSubmit="@SaveAsync"
          OnInvalidSubmit="@(e=>_hasError = true)">
        <DataAnnotationsValidator />

        <label for="Title">Title</label>
        <Input Id="Title" name="Title" Placeholder="input with clear icon" AllowClear="true" @bind-Value="_collection.Title" TValue="string" />
        <ValidationMessage For="@(()=>_collection.Title)" />
        <Divider />

        <label for="TopicTitle">Topic</label>
        <AutoComplete name="TopicTitle" Id="TopicTitle" @bind-Value="_collection.TopicTitle" Options="@options"
                  OnSelectionChange="e=> selectItem = e"
                  OnActiveChange="e=> activeItem = e"
                  Placeholder="Topic Title" />
        <ValidationMessage For="@(()=>_collection.Topic)" />
        <Divider />

        <label for="Description">Description</label>
        <TextArea AutoSize="true" MinRows="7" name="Description" Id="EmaDescriptionilBody" Placeholder="Description" AllowClear="true" @bind-Value="_collection.Description" />
        <ValidationMessage For="@(()=>_collection.Description)" />
        <Divider />

        <button type="submit" class="btn btn-primary">Save</button>
        <Divider />

        @if (_hasError)
        {
            <div class="col-md-4" style="margin-top:10px">
                <label>Validation Messages: </label>
                <ValidationSummary />
            </div>
        }
    </EditForm>
}

@code {
    [Parameter]
    public Guid CollectionId { get; set; }

    bool _hasError = false;
    private AutoCompleteOption selectItem;
    private AutoCompleteOption activeItem;
    Collection _collection;
    IEnumerable<string> options;
    List<Topic> _topics;

    async Task SaveAsync(EditContext editContext)
    {
        Spinner.Show();
        _collection.TopicId = _topics.First(x => x.Title == _collection.TopicTitle).Id;
        var result = await UnitOfWork.Collections.AddAsync(_collection);
        if (result != null)
        {
            await UnitOfWork.SaveChangesAsync();
            await Message.Success("Collection was created");
        }
        else
        {
            await Message.Error("Something went wrong");
        }
        _hasError = false;
        _collection = new();
        Spinner.Hide();
    }

    protected override async Task OnParametersSetAsync()
    {
        Spinner.Show();
        _collection = await UnitOfWork.Collections.GetByIdAsync(CollectionId);
        if (AppData.User != null
            && (_collection.AppUserId == AppData.User.Id || AppData.IsAdmin))
        {
            _topics = await UnitOfWork.Topics.GetAllAsync();
            options = _topics.Select(x => x.Title);
            Spinner.Hide();
            Navigation.NavigateTo("MyCollections");
        }
        else
        {
            Spinner.Hide();
            Navigation.NavigateTo("Identity/Account/Login");
        }
    }
}

